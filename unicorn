#!/usr/bin/env python3

from __future__ import print_function

import os

os.system("printf '\033]2;Unicorn Framework\a'")

import sys
import subprocess
import readline
import time
import socket

from os import environ
from core.badges import badges
from core.unicat import UniCat
from core.helper import helper

badges = badges()
unicat = UniCat()
helper = helper()

class MyCompleter(object):
    def __init__(self, options):
        self.options = sorted(options)

    def complete(self, text, state):
        if state == 0:
            if not text:
                self.matches = self.options[:]
            else:
                self.matches = [s for s in self.options
                                if s and s.startswith(text)]
        try:
            return self.matches[state]
        except IndexError:
            return None

    def display_matches(self, substitution, matches, longest_match_length):
        line_buffer = readline.get_line_buffer()
        columns = environ.get("COLUMNS", 80)

        print()

        tpl = "{:<" + str(int(max(map(len, matches)) * 1.2)) + "}"

        buffer = ""
        for match in matches:
            match = tpl.format(match[len(substitution):])
            if len(buffer + match) > columns:
                print(buffer)
                buffer = ""
            buffer += match

        if buffer:
            print(buffer)

        print("> ", end="")
        print(line_buffer, end="")
        sys.stdout.flush()

core = [
    'clear',
    'exit',
    'help',
    'options',
    'run',
    'set',
    'update'
    ]

core = [x.split(' ')[0] for x in core]

completer = MyCompleter(list(set(core)))
readline.set_completer_delims(' \t\n;')
readline.set_completer(completer.complete)
readline.set_completion_display_matches_hook(completer.display_matches)
readline.parse_and_bind('tab: complete')

def banner():
    os.system("clear")
    os.system("cat banner/banner.txt")
    print("")
    print("Unicorn Framework "+helper.version)
    print("----------------------")
    print("")

def main():
    lport = str(helper.lport)
    lhost = str(helper.lhost)
    try:
        ui = input('\033[4municorn\033[0m> ').strip(" ")
    except:
        sys.exit()
    ui = ui.split()
    while True:
        if ui == []:
            pass
        elif ui[0] == "exit":
            sys.exit()
        elif ui[0] == "clear":
            os.system("clear")
        elif ui[0] == "update":
            os.system("chmod +x etc/update.sh && etc/update.sh")
        elif ui[0] == "help":
            print("")
            print("Core Commands")
            print("=============")
            os.system("cat data/cmds/core_cmds.txt")
            print("")
        elif ui[0] == "options":
            if len(lhost) >= 12 or len(lport) >= 12:
                if len(lhost) > len(lport):
                    bigger = len(lhost) - 3
                else:
                    bigger = len(lport) - 3
            else:
                bigger = 8
            print("")
            print("Unicorn Options")
            print("===============")
            print("")
            print("    Option        Value" + " " * bigger + "Description")
            print("    ------        -----" + " " * bigger + "-----------")
            print("    LHOST         " + lhost + " " * (5 - len(lhost) + bigger) + "Local host.")
            print("    LPORT         " + lport + " " * (5 - len(lport) + bigger) + "Local port.")
            print("")
        elif ui[0] == "set":
            if len(ui) < 3:
                print("Usage: set <option> <value>")
            else:
                if ui[1].lower() == "lhost":
                    lhost = ui[2]
                    print(badges.I + "LHOST ==> " + ui[2])
                elif ui[1].lower() == "lport":
                    lport = ui[2]
                    print(badges.I + "LPORT ==> " + ui[2])
                else:
                    print(badges.E +"Option is not found!")
        elif ui[0] == "run":
            if lhost == "" or lport == "":
                print(badges.E +"Failed to start listener!")
            else:
                try:
                    unicat.server(lhost, int(lport))
                except SystemExit:
                    pass
        else:
            print(badges.E +"Unrecognized command!")
        try:
            ui = input('\033[4municorn\033[0m> ').strip(" ")
        except:
            sys.exit()
        ui = ui.split()
        
banner()
main()
